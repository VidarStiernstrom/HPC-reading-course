##########################################################################################################################################

Testing different versions of rho_inv with optiomization flags. All tests are turns = 2000 and N = 801

##########################################################################################################################################


##########################################################################################################################################

Basic version

##########################################################################################################################################

axel@AxelComputer:~/exjobb/Hyperbolic-system-SBP-FD-solver/code$ time mpirun -n 1 bin/wave_eq_benchmark

real    0m26,712s
user    0m26,575s
sys     0m0,051s


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  Ts/call  Ts/call  name    
 99.75      8.25     8.25                             rho_inv(int, int, std::array<double, 2ul> const&, std::array<double, 2ul> const&)
  1.22      8.35     0.10                             frame_dummy

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
           else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
           function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
           the function in the gprof listing. If the index is
           in parenthesis it shows where it would appear in
           the gprof listing if it were to be printed.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

##########################################################################################################################################

rho_inv with multiplication instead of division

##########################################################################################################################################

axel@AxelComputer:~/exjobb/Hyperbolic-system-SBP-FD-solver/code$ time mpirun -n 1 bin/wave_eq_benchmark

real    0m24,437s
user    0m24,326s
sys     0m0,035s


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  Ts/call  Ts/call  name    
 98.85      7.07     7.07                             rho_inv(int, int, std::array<double, 2ul> const&, std::array<double, 2ul> const&)
  1.98      7.21     0.14                             frame_dummy
  0.14      7.22     0.01                             setup(_p_DM*, int, _p_Vec*)

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

##########################################################################################################################################

rho_inv with multiplication instead of division and only doing one evaluation of rho_inv per iteration.

Code change:

      inv = rho_inv(i, j, hi, xl);
      F[j][i][0] = -inv*D1.apply_x_interior(q, hi[0], i, j, 2);
      F[j][i][1] = -inv*D1.apply_y_interior(q, hi[1], i, j, 2);

##########################################################################################################################################

axel@AxelComputer:~/exjobb/Hyperbolic-system-SBP-FD-solver/code$ time mpirun -n 1 bin/wave_eq_benchmark

real    0m14,684s
user    0m14,599s
sys     0m0,031s


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  Ts/call  Ts/call  name    
 94.58      3.14     3.14                             rho_inv(int, int, std::array<double, 2ul> const&, std::array<double, 2ul> const&)
  6.39      3.35     0.21                             frame_dummy

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.


##########################################################################################################################################

Further exploration would be to compute all values for rho_inv and store them in an array on setup and then access the results instead of calculation them each turn.
Depending how the resulting array will fit in the cache this will either be a speed increase or decrease.

##########################################################################################################################################
